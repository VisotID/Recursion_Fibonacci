// Высоцкая И.Д.
#pragma once // директива в С++, для предотвращения многократного включения одного и того же заголовочного файла
#include <chrono> // библиотека С++ для работы со временем
#include <cassert> // библиотека С++ для обнаружения логических ошибок в программе(для функции assert)

using namespace std; // используем пространство имен std для того, чтобы не писать перед функциями cin, cout "std"
using namespace chrono; // пространство имён chrono предназначено для работы с датой и временем

/// функция, вычисляющая числа Фибоначчи рекурсивно
/// Числа Фибоначчи F(n) = F(n-1) + F(n-2)
/// BigO: O(2^n)
/// n - число
long long recurs_fib(long long n);

/// функция, вычисляющая числа Фибоначчи с помощью цикла
/// Числа Фибоначчи F(n) = F(n-1) + F(n-2)
/// BigO: O(n)
/// n - число
long long cycle_fib(long long n);

// тестирование функций нахождения числа Фибоначчи
void test_fib();

/// шаблон функции нахождения времени работы функции
/// Temp func - функция, время работы которой нужно определить
template <typename Temp>
int Time_func(Temp func)
{
	auto t = steady_clock::now(); // начальное время, steady_clock::now() - возвращает текущее время из объекта класса steady_clock
	func(); // использование функции
	auto t2 = steady_clock::now(); // конечное время
	auto delta = duration_cast<milliseconds>(t2 - t); // duration_cast<milliseconds>(t2 - t) - используется для преобразования объекта длительности в тип длительности в миллисекундах
	return delta.count(); // возвращаем результат
}